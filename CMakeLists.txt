# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(safetyhook)

if(CMKR_ROOT_PROJECT AND NOT CMKR_DISABLE_VCPKG)
	include(FetchContent)
	message(STATUS "Fetching vcpkg...")
	FetchContent_Declare(vcpkg URL "https://github.com/microsoft/vcpkg/archive/refs/tags/2021.12.01.tar.gz")
	FetchContent_MakeAvailable(vcpkg)
	include("${vcpkg_SOURCE_DIR}/scripts/buildsystems/vcpkg.cmake")
endif()

# Packages
find_package(bddisasm REQUIRED)

# Target safetyhook
set(CMKR_TARGET safetyhook)
set(safetyhook_SOURCES "")

list(APPEND safetyhook_SOURCES
	"src/SafetyHook.cpp"
	"src/SafetyHookFactory.cpp"
	"src/ThreadFreezer.cpp"
	"src/ThreadFreezer.hpp"
	"include/SafetyHook.hpp"
	"include/SafetyHookFactory.hpp"
)

list(APPEND safetyhook_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${safetyhook_SOURCES})
add_library(safetyhook STATIC)

if(safetyhook_SOURCES)
	target_sources(safetyhook PRIVATE ${safetyhook_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${safetyhook_SOURCES})

add_library(safetyhook::safetyhook ALIAS safetyhook)
target_compile_definitions(safetyhook PUBLIC
	NOMINMAX
)

target_compile_features(safetyhook PUBLIC
	cxx_std_17
)

target_include_directories(safetyhook PUBLIC
	"include/"
)

target_link_libraries(safetyhook PUBLIC
	bddisasm::bddisasm
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target test0
set(CMKR_TARGET test0)
set(test0_SOURCES "")

list(APPEND test0_SOURCES
	"tests/test0.cpp"
)

list(APPEND test0_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${test0_SOURCES})
add_executable(test0)

if(test0_SOURCES)
	target_sources(test0 PRIVATE ${test0_SOURCES})
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT test0)
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${test0_SOURCES})

target_link_libraries(test0 PRIVATE
	safetyhook::safetyhook
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

